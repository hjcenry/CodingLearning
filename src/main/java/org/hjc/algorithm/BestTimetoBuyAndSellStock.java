package org.hjc.algorithm;

/**
 * https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iii/description/
 * <p>
 * 123. 买卖股票的最佳时机 III
 * 困难
 * 相关标签
 * 相关企业
 * 给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。
 * <p>
 * 设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。
 * <p>
 * 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
 * <p>
 * <p>
 * <p>
 * 示例 1:
 * <p>
 * 输入：prices = [3,3,5,0,0,3,1,4]
 * 输出：6
 * 解释：在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
 * 随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。
 * 示例 2：
 * <p>
 * 输入：prices = [1,2,3,4,5]
 * 输出：4
 * 解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
 * 注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
 * 因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
 * 示例 3：
 * <p>
 * 输入：prices = [7,6,4,3,1]
 * 输出：0
 * 解释：在这个情况下, 没有交易完成, 所以最大利润为 0。
 * 示例 4：
 * <p>
 * 输入：prices = [1]
 * 输出：0
 *
 * @author hejincheng
 * @version 1.0
 * @date 2023/10/24 17:06
 **/
public class BestTimetoBuyAndSellStock {

    public static void main(String[] args) {
        BestTimetoBuyAndSellStock bestTimetoBuyAndSellStock = new BestTimetoBuyAndSellStock();
//        int[] prices = new int[]{7, 1, 5, 3, 6, 4};
//        int[] prices = new int[]{1, 2};
        int[] prices = new int[]{
                886, 729, 539, 474, 5, 653, 588, 198, 313, 111, 38, 808, 848, 364, 819, 747, 520, 568, 583, 253, 605, 442, 779, 903, 217, 284, 927, 33, 859, 75, 418, 612, 174, 316, 167, 40, 945, 740, 174, 279, 985, 133, 38, 919, 528, 844, 101, 291, 673, 561, 244, 827, 602, 58, 777, 625, 95, 563, 102, 400, 921, 988, 472, 629, 781, 215, 7, 131, 220, 147, 841, 511, 201, 558, 435, 802, 995, 514, 83, 618, 399, 542, 352, 34, 943, 983, 498, 20, 235, 156, 768, 237, 828, 41, 205, 188, 229, 307, 514, 548, 827, 369, 381, 202, 498, 27, 948, 118, 696, 355, 929, 148, 348, 383, 472, 125, 916, 639, 801, 775, 285, 38, 70, 117, 725, 35, 162, 586, 329, 540, 482, 148, 113, 317, 732, 115, 715, 119, 891, 161, 338, 939, 412, 615, 304, 511, 604, 969, 912, 729, 331, 352, 533, 981, 831, 949, 134, 85, 927, 750, 564, 77, 464, 261, 576, 702, 354, 330, 974, 570, 575, 548, 503, 275, 957, 856, 463, 286, 918, 626, 295, 501, 21, 251, 561, 261, 485, 116, 761, 506, 412, 671, 249, 880, 63, 359, 297, 84, 241, 697, 496, 291, 238, 86, 342, 240, 409, 893, 733, 162, 867, 726, 965, 111, 442, 265, 870, 32, 369, 991, 515, 120, 333, 354, 521, 914, 969, 771, 80, 990, 562, 936, 571, 330, 768, 213, 699, 199, 96, 971, 511, 393, 203, 435, 591, 228, 224, 549, 479, 467, 570, 448, 766, 338, 426, 222, 177, 232, 749, 82, 514, 344, 798, 951, 389, 844, 491, 129, 499, 19, 666, 384, 243, 546, 516, 513, 945, 961, 19, 126, 239, 378, 832, 300, 112, 748, 378, 232, 556, 235, 635, 129, 23, 573, 112, 509, 448, 428, 126, 169, 892, 276, 231, 215, 165, 642, 965, 604, 28, 73, 732, 340, 990, 889, 800, 644, 209, 275, 729, 840, 71, 3, 513, 255, 744, 259, 609, 173, 359, 445, 704, 6, 862, 768, 254, 633, 957, 131, 101, 556, 670, 446, 162, 685, 83, 565, 496, 587, 357, 19, 311, 684, 361, 189, 712, 261, 719, 917, 842, 313, 522, 563, 293, 355, 853, 675, 460, 832, 798, 322, 139, 960, 633, 670, 213, 289, 957, 648, 571, 35, 445, 418, 38, 760, 715, 540, 727, 13, 491, 828, 281, 32, 974, 517, 401, 845, 523, 564, 581, 335, 907, 452, 23, 763, 459, 158, 679, 983, 954, 466, 357, 534, 550, 967, 207, 788, 39, 873, 170, 591, 428, 605, 458, 105, 930, 462, 949, 446, 260, 418, 984, 67, 539, 919, 716, 509, 236, 221, 832, 497, 628, 228, 588, 849, 364, 112, 808, 732, 691, 540, 623, 579, 181, 580, 60, 277, 577, 198, 231, 169, 399, 90, 1, 389, 367, 417, 56, 780, 628, 133, 326, 331, 174, 243, 2, 484, 189, 728, 273, 601, 7, 726, 720, 226, 822, 185, 348, 512, 629, 626, 887, 389, 613, 800, 884, 588, 898, 656, 561, 727, 970, 389, 381, 21, 977, 919, 195, 330, 66, 829, 684, 494, 523, 393, 473, 423, 505, 799, 172, 610, 41, 847, 431, 367, 808, 794, 913, 55, 819, 615, 478, 226, 398, 24, 663, 83, 589, 300, 691, 759, 940, 514, 649, 16, 493, 56, 236, 479, 825, 616, 473, 87, 51, 340, 428, 346, 35, 22, 592, 791, 733, 470, 294, 688, 803, 431, 491, 198, 689, 29, 458, 741, 115, 888, 359, 811, 747, 78, 510, 632, 623, 778, 551, 107, 157, 541, 760, 43, 724, 954, 686, 703, 391, 883, 756, 357, 48, 426, 267, 260, 443, 496, 562, 361, 504, 888, 463, 219, 814, 901, 220, 433, 654, 843, 709, 323, 748, 790, 399, 701, 890, 106, 201, 237, 865, 11, 259, 535, 871, 839, 51, 697, 418, 432, 852, 208, 837, 20, 499, 917, 906, 298, 733, 672, 739, 410, 655, 80, 3, 497, 781, 727, 673, 533, 524, 918, 286, 384, 218, 904, 357, 834, 980, 150, 905
        };
        long start = System.nanoTime();
        int diff = bestTimetoBuyAndSellStock.maxProfit2(prices);
        long end = System.nanoTime();
        System.out.println(end - start);
        System.out.println(diff);
    }

    public int maxProfit(int[] prices) {
        if (prices.length == 0) {
            return 0;
        }
        int maxDiff = 0;
        int preMin = -1;
        for (int i = 0; i < prices.length; i++) {
            int min = prices[i];
            if (preMin >= 0 && min >= preMin) {
                continue;
            }
            preMin = min;
            for (int j = i + 1; j < prices.length; j++) {
                int max = prices[j];
                if (max <= min) {
                    continue;
                }
                maxDiff = Math.max(maxDiff, (max - min));
            }
        }
        return maxDiff;
    }

    public int maxProfit2(int[] prices) {
        int cost = Integer.MAX_VALUE, profit = 0;
        for (int price : prices) {
            cost = Math.min(cost, price);
            profit = Math.max(profit, price - cost);
        }
        return profit;
    }
}
